from scanner import Scanner

class Node:
    def __init__(self, parent, children) -> None:
        self.parent = parent
        self.children = children

parsing_table = {
    "Program" : {";": "",
                 "break": "Statements",
                 "continue": "Statements",
                 "ID": "Statements",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "Statements",
                 "global": "Statements",
                 "def": "Statements",
                 ":": "",
                 "if": "Statements",
                 "else": "",
                 "while": "Statements",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "Statements",
                 },
    "Statements": {";": "EPSILON",
                 "break": "Statement ; Statements",
                 "continue": "Statement ; Statements",
                 "ID": "Statement ; Statements",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "Statement ; Statements",
                 "global": "Statement ; Statements",
                 "def": "Statement ; Statements",
                 ":": "",
                 "if": "Statement ; Statements",
                 "else": "EPSILON",
                 "while": "Statement ; Statements",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "EPSILON",
                 },
    "Statement": {";": "",
                 "break": "Simple_stmt",
                 "continue": "Simple_stmt",
                 "ID": "Simple_stmt",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "Simple_stmt",
                 "global": "Simple_stmt",
                 "def": "Compound_stmt",
                 ":": "",
                 "if": "Compound_stmt",
                 "else": "",
                 "while": "Compound_stmt",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "Simple_stmt": {";": "",
                 "break": "break",
                 "continue": "continue",
                 "ID": "Assignment_Call",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "Return_stmt",
                 "global": "Global_stmt",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "Compound_stmt": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "",
                 "global": "",
                 "def": "Function_def",
                 ":": "",
                 "if": "If_stmt",
                 "else": "",
                 "while": "Iteration_stmt",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "Assignment_Call": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "ID B",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "B": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "",
                 "=": "= C",
                 "[": "[ Expression ] = C",
                 "]": "",
                 "(": "( Arguments )",
                 ")": "",
                 ",": "",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "C": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "Expression",
                 "=": "",
                 "[": "[ Expression List_Rest ]",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "Expression",
                 "$": "",
                 },
    "List_Rest": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "",
                 "=": "",
                 "[": "",
                 "]": "EPSILON",
                 "(": "",
                 ")": "",
                 ",": ", Expression List_Rest",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "Return_stmt": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "return Return_Value",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "Return_Value": {";": "EPSILON",
                 "break": "",
                 "continue": "",
                 "ID": "Expression",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "Expression",
                 "$": "",
                 },
    "Global_stmt": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "",
                 "global": "global ID",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "Function_def": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "",
                 "global": "",
                 "def": "def ID ( Params ) : Statements",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "Params": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "ID Params_Prime",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "EPSILON",
                 ",": "",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "Params_Prime": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "EPSILON",
                 ",": ", ID Params_Prime",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "If_stmt": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "if Relational_Expression : Statements Else_block",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "Else_block": {";": "EPSILON",
                 "break": "",
                 "continue": "",
                 "ID": "",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "else : Statements",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "Iteration_stmt": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "while ( Relational_Expression ) Statements",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "Relational_Expression": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "Expression Relop Expression",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "Expression Relop Expression",
                 "$": "",
                 },
    "Relop": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "==",
                 "<": "<",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "Expression": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "Term Expression_Prime",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "Term Expression_Prime",
                 "$": "",
                 },
    "Expression_Prime": {";": "EPSILON",
                 "break": "",
                 "continue": "",
                 "ID": "",
                 "=": "",
                 "[": "",
                 "]": "EPSILON",
                 "(": "",
                 ")": "EPSILON",
                 ",": "EPSILON",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "EPSILON",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "EPSILON",
                 "<": "EPSILON",
                 "+": "+ Term Expression_Prime",
                 "-": "- Term Expression_Prime",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "Term": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "Factor Term_Prime",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "Factor Term_Prime",
                 "$": "",
                 },
    "Term_Prime": {";": "EPSILON",
                 "break": "",
                 "continue": "",
                 "ID": "",
                 "=": "",
                 "[": "",
                 "]": "EPSILON",
                 "(": "",
                 ")": "EPSILON",
                 ",": "EPSILON",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "EPSILON",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "EPSILON",
                 "<": "EPSILON",
                 "+": "EPSILON",
                 "-": "EPSILON",
                 "*": "* Factor Term_Prime",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "Factor": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "Atom Power",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "Atom Power",
                 "$": "",
                 },
    "Power": {";": "Primary",
                 "break": "",
                 "continue": "",
                 "ID": "",
                 "=": "",
                 "[": "Primary",
                 "]": "Primary",
                 "(": "Primary",
                 ")": "Primary",
                 ",": "Primary",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "Primary",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "Primary",
                 "<": "Primary",
                 "+": "Primary",
                 "-": "Primary",
                 "*": "Primary",
                 "**": "** Factor",
                 "NUM": "",
                 "$": "",
                 },
    "Primary": {";": "EPSILON",
                 "break": "",
                 "continue": "",
                 "ID": "",
                 "=": "",
                 "[": "[ Expression ] Primary",
                 "]": "EPSILON",
                 "(": "( Arguments ) Primary",
                 ")": "EPSILON",
                 ",": "EPSILON",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "EPSILON",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "EPSILON",
                 "<": "EPSILON",
                 "+": "EPSILON",
                 "-": "EPSILON",
                 "*": "EPSILON",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "Arguments": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "Expression Arguments_Prime",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "EPSILON",
                 ",": "",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "Expression Arguments_Prime",
                 "$": "",
                 },
    "Arguments_Prime": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "EPSILON",
                 ",": "Expression Arguments_Prime",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "",
                 "$": "",
                 },
    "Atom": {";": "",
                 "break": "",
                 "continue": "",
                 "ID": "ID",
                 "=": "",
                 "[": "",
                 "]": "",
                 "(": "",
                 ")": "",
                 ",": "",
                 "return": "",
                 "global": "",
                 "def": "",
                 ":": "",
                 "if": "",
                 "else": "",
                 "while": "",
                 "==": "",
                 "<": "",
                 "+": "",
                 "-": "",
                 "*": "",
                 "**": "",
                 "NUM": "NUM",
                 "$": "",
                 }
}

def start():
    sc = Scanner()
    while True:
        token = sc.get_next_token()

